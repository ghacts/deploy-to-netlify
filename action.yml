name: Manual deploy to Netlify
description: GitHub Actions for manual deploying static site to Netlify.

inputs:
  auth-token:
    description: Netlify authentication token
    required: true
  site:
    description: Netlify site name
    required: true
  dir:
    description: Directory to deploy
    required: false
    default: 'dist/'
  filter:
    description: For monorepos, specify the name of the application to run the command in
    required: false
    default: ''
  functions:
    description: Netlify functions directory to deploy
    required: false
    default: ''
  message:
    description: Deploy message
    required: false
    default: ''
  alias:
    description: Site alias
    required: false
    default: ''
  prod:
    description: Deploy to production
    required: false
    default: 'false'

outputs:
  success:
    description: Deployment success
    value: ${{ steps.deploy.outputs.success }}
  netlify-deploy-url:
    description: Netlify deploy URL
    value: ${{ steps.post-deploy.outputs.netlify-deploy-url }}

runs:
  using: "composite"
  steps:
    - name: Set up Node
      uses: actions/setup-node@v4

    - name: Set Netlify deploy alias argument
      if: inputs.prod == 'false' && inputs.alias != ''
      run: echo "NETLIFY_DEPLOY_ALIAS_ARG=--alias=${{ inputs.alias }}" >> "$GITHUB_ENV"
      shell: bash

    - name: Set Netlify deploy dir argument
      if: inputs.dir != ''
      run: echo "NETLIFY_DEPLOY_DIR_ARG=--dir=${{ inputs.dir }}" >> "$GITHUB_ENV"
      shell: bash

    - name: Set Netlify deploy filter argument
      if: inputs.filter != ''
      run: echo "NETLIFY_DEPLOY_FILTER_ARG=--filter=${{ inputs.filter }}" >> "$GITHUB_ENV"
      shell: bash

    - name: Set Netlify function dir
      if: inputs.functions != ''
      run: echo "NETLIFY_FUNCTIONS_ARG=--functions=${{ inputs.functions }}" >> "$GITHUB_ENV"
      shell: bash

    - name: Set Netlify deploy message
      if: inputs.message == ''
      run: echo "NETLIFY_DEPLOY_MESSAGE=$(git log -1 --pretty=%s)" >> "$GITHUB_ENV"
      shell: bash

    - name: Set Netlify deploy message
      if: inputs.message != ''
      run: echo "NETLIFY_DEPLOY_MESSAGE=${{ inputs.message }}" >> "$GITHUB_ENV"
      shell: bash

    - name: Set Netlify prod argument
      if: inputs.prod == 'true'
      run: echo "NETLIFY_PROD_ARG=--prod" >> "$GITHUB_ENV"
      shell: bash

    - name: Set Netlify deployment as production deployment
      run: echo "PROD=${{ inputs.prod }}" >> "$GITHUB_ENV"
      shell: bash

    - name: Deploy site
      id: deploy
      env:
        NETLIFY_AUTH_TOKEN: "${{ inputs.auth-token }}"
        NETLIFY_SITE: "${{ inputs.site }}"
        NETLIFY_DIR: "${{ inputs.dir }}"
      run: |
        NETLIFY_DEPLOY_COMMAND="netlify deploy \
          --auth '${NETLIFY_AUTH_TOKEN}' \
          --site '${NETLIFY_SITE}' \
          ${NETLIFY_DEPLOY_ALIAS_ARG} \
          ${NETLIFY_DEPLOY_DIR_ARG} \
          ${NETLIFY_DEPLOY_FILTER_ARG} \
          ${NETLIFY_FUNCTIONS_ARG} \
          --message '${NETLIFY_DEPLOY_MESSAGE}' \
          ${NETLIFY_PROD_ARG}"
        echo "NETLIFY_DEPLOY_COMMAND=${NETLIFY_DEPLOY_COMMAND}" >> "$GITHUB_ENV"

        DEPLOY_COMMAND="${NETLIFY_DEPLOY_COMMAND} --json | tr '\n' ' '"

        echo "Running deploy command:"
        echo $DEPLOY_COMMAND
        OUTPUT=$(eval $DEPLOY_COMMAND)

        echo "Deploy output:"
        echo $OUTPUT

        echo "netlify-output=$OUTPUT" >> "$GITHUB_OUTPUT"
        echo "success=true" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Post deploy
      id: post-deploy
      if: success()
      env:
        NETLIFY_DRAFT_URL: ${{ fromJson(steps.deploy.outputs.netlify-output).deploy_url }}
        NETLIFY_PROD_URL: ${{ fromJson(steps.deploy.outputs.netlify-output).url }}
      run: |
        ([[ ${PROD:-false} == "true" ]] && \
          echo "netlify-deploy-url=${NETLIFY_PROD_URL}" >> "$GITHUB_OUTPUT") || \
          echo "netlify-deploy-url=${NETLIFY_DRAFT_URL}" >> "$GITHUB_OUTPUT"
      shell: bash

    - name: Debug deploy
      id: debug-deploy
      if: always() && (steps.deploy.outcome == 'failure' || steps.post_deploy.outcome == 'failure' )
      env:
        NETLIFY_AUTH_TOKEN: "${{ inputs.auth-token }}"
        NETLIFY_SITE: "${{ inputs.site }}"
        NETLIFY_DIR: "${{ inputs.dir }}"
      run: eval $NETLIFY_DEPLOY_COMMAND
      shell: bash

branding:
  icon: "send"
  color: "green"
